// Code generated by go generate ./...; DO NOT EDIT.

package raylib

import "unsafe"

// Initialize window and OpenGL context
func InitWindow(width int, height int, title string) {
	a0 := int64(width)
	a1 := int64(height)
	a2 := tocstring(title)
	initWindow.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Close window and unload OpenGL context
func CloseWindow() {
	closeWindow.void()
}

// Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
func WindowShouldClose() (res bool) {
	res = windowShouldClose.bool()
	return res
}

// Check if window has been initialized successfully
func IsWindowReady() (res bool) {
	res = isWindowReady.bool()
	return res
}

// Check if window is currently fullscreen
func IsWindowFullscreen() (res bool) {
	res = isWindowFullscreen.bool()
	return res
}

// Check if window is currently hidden
func IsWindowHidden() (res bool) {
	res = isWindowHidden.bool()
	return res
}

// Check if window is currently minimized
func IsWindowMinimized() (res bool) {
	res = isWindowMinimized.bool()
	return res
}

// Check if window is currently maximized
func IsWindowMaximized() (res bool) {
	res = isWindowMaximized.bool()
	return res
}

// Check if window is currently focused
func IsWindowFocused() (res bool) {
	res = isWindowFocused.bool()
	return res
}

// Check if window has been resized last frame
func IsWindowResized() (res bool) {
	res = isWindowResized.bool()
	return res
}

// Check if one specific window flag is enabled
func IsWindowState(flag uint) (res bool) {
	a0 := uint64(flag)
	res = isWindowState.bool(unsafe.Pointer(&a0))
	return res
}

// Set window configuration state using flags
func SetWindowState(flags uint) {
	a0 := uint64(flags)
	setWindowState.void(unsafe.Pointer(&a0))
}

// Clear window configuration state flags
func ClearWindowState(flags uint) {
	a0 := uint64(flags)
	clearWindowState.void(unsafe.Pointer(&a0))
}

// Toggle window state: fullscreen/windowed, resizes monitor to match window resolution
func ToggleFullscreen() {
	toggleFullscreen.void()
}

// Toggle window state: borderless windowed, resizes window to match monitor resolution
func ToggleBorderlessWindowed() {
	toggleBorderlessWindowed.void()
}

// Set window state: maximized, if resizable
func MaximizeWindow() {
	maximizeWindow.void()
}

// Set window state: minimized, if resizable
func MinimizeWindow() {
	minimizeWindow.void()
}

// Set window state: not minimized/maximized
func RestoreWindow() {
	restoreWindow.void()
}

// Set icon for window (single image, RGBA 32bit)
func SetWindowIcon(image Image) {
	a0 := Image(image)
	setWindowIcon.void(unsafe.Pointer(&a0))
}

// Set icon for window (multiple images, RGBA 32bit)
func SetWindowIcons(images *Image, count int) {
	a0 := (*Image)(images)
	a1 := int64(count)
	setWindowIcons.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Set title for window
func SetWindowTitle(title string) {
	a0 := tocstring(title)
	setWindowTitle.void(unsafe.Pointer(&a0))
}

// Set window position on screen
func SetWindowPosition(x int, y int) {
	a0 := int64(x)
	a1 := int64(y)
	setWindowPosition.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Set monitor for the current window
func SetWindowMonitor(monitor int) {
	a0 := int64(monitor)
	setWindowMonitor.void(unsafe.Pointer(&a0))
}

// Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
func SetWindowMinSize(width int, height int) {
	a0 := int64(width)
	a1 := int64(height)
	setWindowMinSize.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
func SetWindowMaxSize(width int, height int) {
	a0 := int64(width)
	a1 := int64(height)
	setWindowMaxSize.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Set window dimensions
func SetWindowSize(width int, height int) {
	a0 := int64(width)
	a1 := int64(height)
	setWindowSize.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Set window opacity [0.0f..1.0f]
func SetWindowOpacity(opacity float32) {
	a0 := float32(opacity)
	setWindowOpacity.void(unsafe.Pointer(&a0))
}

// Set window focused
func SetWindowFocused() {
	setWindowFocused.void()
}

// Get native window handle
func GetWindowHandle() (res unsafe.Pointer) {
	getWindowHandle.call(unsafe.Pointer(&res))
	return res
}

// Get current screen width
func GetScreenWidth() (res int32) {
	res = getScreenWidth.int32()
	return res
}

// Get current screen height
func GetScreenHeight() (res int32) {
	res = getScreenHeight.int32()
	return res
}

// Get current render width (it considers HiDPI)
func GetRenderWidth() (res int32) {
	res = getRenderWidth.int32()
	return res
}

// Get current render height (it considers HiDPI)
func GetRenderHeight() (res int32) {
	res = getRenderHeight.int32()
	return res
}

// Get number of connected monitors
func GetMonitorCount() (res int32) {
	res = getMonitorCount.int32()
	return res
}

// Get current monitor where window is placed
func GetCurrentMonitor() (res int32) {
	res = getCurrentMonitor.int32()
	return res
}

// Get specified monitor position
func GetMonitorPosition(monitor int) (res Vector2) {
	a0 := int64(monitor)
	getMonitorPosition.call(unsafe.Pointer(&res), unsafe.Pointer(&a0))
	return res
}

// Get specified monitor width (current video mode used by monitor)
func GetMonitorWidth(monitor int) (res int32) {
	a0 := int64(monitor)
	res = getMonitorWidth.int32(unsafe.Pointer(&a0))
	return res
}

// Get specified monitor height (current video mode used by monitor)
func GetMonitorHeight(monitor int) (res int32) {
	a0 := int64(monitor)
	res = getMonitorHeight.int32(unsafe.Pointer(&a0))
	return res
}

// Get specified monitor physical width in millimetres
func GetMonitorPhysicalWidth(monitor int) (res int32) {
	a0 := int64(monitor)
	res = getMonitorPhysicalWidth.int32(unsafe.Pointer(&a0))
	return res
}

// Get specified monitor physical height in millimetres
func GetMonitorPhysicalHeight(monitor int) (res int32) {
	a0 := int64(monitor)
	res = getMonitorPhysicalHeight.int32(unsafe.Pointer(&a0))
	return res
}

// Get specified monitor refresh rate
func GetMonitorRefreshRate(monitor int) (res int32) {
	a0 := int64(monitor)
	res = getMonitorRefreshRate.int32(unsafe.Pointer(&a0))
	return res
}

// Get window position XY on monitor
func GetWindowPosition() (res Vector2) {
	getWindowPosition.call(unsafe.Pointer(&res))
	return res
}

// Get window scale DPI factor
func GetWindowScaleDPI() (res Vector2) {
	getWindowScaleDPI.call(unsafe.Pointer(&res))
	return res
}

// Get the human-readable, UTF-8 encoded name of the specified monitor
func GetMonitorName(monitor int) (res *byte) {
	a0 := int64(monitor)
	getMonitorName.call(unsafe.Pointer(&res), unsafe.Pointer(&a0))
	return res
}

// Set clipboard text content
func SetClipboardText(text string) {
	a0 := tocstring(text)
	setClipboardText.void(unsafe.Pointer(&a0))
}

// Get clipboard text content
func GetClipboardText() (res *byte) {
	getClipboardText.call(unsafe.Pointer(&res))
	return res
}

// Get clipboard image
func GetClipboardImage() (res Image) {
	getClipboardImage.call(unsafe.Pointer(&res))
	return res
}

// Enable waiting for events on EndDrawing(), no automatic event polling
func EnableEventWaiting() {
	enableEventWaiting.void()
}

// Disable waiting for events on EndDrawing(), automatic events polling
func DisableEventWaiting() {
	disableEventWaiting.void()
}

// Shows cursor
func ShowCursor() {
	showCursor.void()
}

// Hides cursor
func HideCursor() {
	hideCursor.void()
}

// Check if cursor is not visible
func IsCursorHidden() (res bool) {
	res = isCursorHidden.bool()
	return res
}

// Enables cursor (unlock cursor)
func EnableCursor() {
	enableCursor.void()
}

// Disables cursor (lock cursor)
func DisableCursor() {
	disableCursor.void()
}

// Check if cursor is on the screen
func IsCursorOnScreen() (res bool) {
	res = isCursorOnScreen.bool()
	return res
}

// Set background color (framebuffer clear color)
func ClearBackground(color Color) {
	a0 := Color(color)
	clearBackground.void(unsafe.Pointer(&a0))
}

// Setup canvas (framebuffer) to start drawing
func BeginDrawing() {
	beginDrawing.void()
}

// End canvas drawing and swap buffers (double buffering)
func EndDrawing() {
	endDrawing.void()
}

// Begin 2D mode with custom camera (2D)
func BeginMode2D(camera Camera2D) {
	a0 := Camera2D(camera)
	beginMode2D.void(unsafe.Pointer(&a0))
}

// Ends 2D mode with custom camera
func EndMode2D() {
	endMode2D.void()
}

// Begin 3D mode with custom camera (3D)
func BeginMode3D(camera Camera3D) {
	a0 := Camera3D(camera)
	beginMode3D.void(unsafe.Pointer(&a0))
}

// Ends 3D mode and returns to default 2D orthographic mode
func EndMode3D() {
	endMode3D.void()
}

// Begin drawing to render texture
func BeginTextureMode(target RenderTexture2D) {
	a0 := RenderTexture2D(target)
	beginTextureMode.void(unsafe.Pointer(&a0))
}

// Ends drawing to render texture
func EndTextureMode() {
	endTextureMode.void()
}

// Begin custom shader drawing
func BeginShaderMode(shader Shader) {
	a0 := Shader(shader)
	beginShaderMode.void(unsafe.Pointer(&a0))
}

// End custom shader drawing (use default shader)
func EndShaderMode() {
	endShaderMode.void()
}

// Begin blending mode (alpha, additive, multiplied, subtract, custom)
func BeginBlendMode(mode int) {
	a0 := int64(mode)
	beginBlendMode.void(unsafe.Pointer(&a0))
}

// End blending mode (reset to default: alpha blending)
func EndBlendMode() {
	endBlendMode.void()
}

// Begin scissor mode (define screen area for following drawing)
func BeginScissorMode(x int, y int, width int, height int) {
	a0 := int64(x)
	a1 := int64(y)
	a2 := int64(width)
	a3 := int64(height)
	beginScissorMode.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// End scissor mode
func EndScissorMode() {
	endScissorMode.void()
}

// Set target FPS (maximum)
func SetTargetFPS(fps int) {
	a0 := int64(fps)
	setTargetFPS.void(unsafe.Pointer(&a0))
}

// Get time in seconds for last frame drawn (delta time)
func GetFrameTime() (res float32) {
	getFrameTime.call(unsafe.Pointer(&res))
	return res
}

// Get elapsed time in seconds since InitWindow()
func GetTime() (res float64) {
	getTime.call(unsafe.Pointer(&res))
	return res
}

// Get current FPS
func GetFPS() (res int32) {
	res = getFPS.int32()
	return res
}
