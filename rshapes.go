// Code generated by go generate; DO NOT EDIT.

package raylib

import (
	"github.com/judah-caruso/raylib-purego/internal"
	"unsafe"
)

// Set texture and rectangle to be used on shapes drawing
func SetShapesTexture(texture Texture2D, source Rectangle) {
	a0 := Texture2D(texture)
	a1 := Rectangle(source)
	internal.SetShapesTexture.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Get texture that is used for shapes drawing
func GetShapesTexture() (res Texture2D) {
	internal.GetShapesTexture.Call(unsafe.Pointer(&res))
	return res
}

// Get texture source rectangle that is used for shapes drawing
func GetShapesTextureRectangle() (res Rectangle) {
	internal.GetShapesTextureRectangle.Call(unsafe.Pointer(&res))
	return res
}

// Draw a pixel using geometry [Can be slow, use with care]
func DrawPixel(posX int, posY int, color Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := Color(color)
	internal.DrawPixel.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a pixel using geometry (Vector version) [Can be slow, use with care]
func DrawPixelV(position Vector2, color Color) {
	a0 := Vector2(position)
	a1 := Color(color)
	internal.DrawPixelV.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Draw a line
func DrawLine(startPosX int, startPosY int, endPosX int, endPosY int, color Color) {
	a0 := int64(startPosX)
	a1 := int64(startPosY)
	a2 := int64(endPosX)
	a3 := int64(endPosY)
	a4 := Color(color)
	internal.DrawLine.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a line (using gl lines)
func DrawLineV(startPos Vector2, endPos Vector2, color Color) {
	a0 := Vector2(startPos)
	a1 := Vector2(endPos)
	a2 := Color(color)
	internal.DrawLineV.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a line (using triangles/quads)
func DrawLineEx(startPos Vector2, endPos Vector2, thick float32, color Color) {
	a0 := Vector2(startPos)
	a1 := Vector2(endPos)
	a2 := float32(thick)
	a3 := Color(color)
	internal.DrawLineEx.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw lines sequence (using gl lines)
func DrawLineStrip(points *Vector2, pointCount int, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := Color(color)
	internal.DrawLineStrip.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw line segment cubic-bezier in-out interpolation
func DrawLineBezier(startPos Vector2, endPos Vector2, thick float32, color Color) {
	a0 := Vector2(startPos)
	a1 := Vector2(endPos)
	a2 := float32(thick)
	a3 := Color(color)
	internal.DrawLineBezier.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw a color-filled circle
func DrawCircle(centerX int, centerY int, radius float32, color Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radius)
	a3 := Color(color)
	internal.DrawCircle.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw a piece of a circle
func DrawCircleSector(center Vector2, radius float32, startAngle float32, endAngle float32, segments int, color Color) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := float32(startAngle)
	a3 := float32(endAngle)
	a4 := int64(segments)
	a5 := Color(color)
	internal.DrawCircleSector.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw circle sector outline
func DrawCircleSectorLines(center Vector2, radius float32, startAngle float32, endAngle float32, segments int, color Color) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := float32(startAngle)
	a3 := float32(endAngle)
	a4 := int64(segments)
	a5 := Color(color)
	internal.DrawCircleSectorLines.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw a gradient-filled circle
func DrawCircleGradient(centerX int, centerY int, radius float32, inner Color, outer Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radius)
	a3 := Color(inner)
	a4 := Color(outer)
	internal.DrawCircleGradient.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a color-filled circle (Vector version)
func DrawCircleV(center Vector2, radius float32, color Color) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := Color(color)
	internal.DrawCircleV.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw circle outline
func DrawCircleLines(centerX int, centerY int, radius float32, color Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radius)
	a3 := Color(color)
	internal.DrawCircleLines.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw circle outline (Vector version)
func DrawCircleLinesV(center Vector2, radius float32, color Color) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := Color(color)
	internal.DrawCircleLinesV.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw ellipse
func DrawEllipse(centerX int, centerY int, radiusH float32, radiusV float32, color Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radiusH)
	a3 := float32(radiusV)
	a4 := Color(color)
	internal.DrawEllipse.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw ellipse outline
func DrawEllipseLines(centerX int, centerY int, radiusH float32, radiusV float32, color Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radiusH)
	a3 := float32(radiusV)
	a4 := Color(color)
	internal.DrawEllipseLines.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw ring
func DrawRing(center Vector2, innerRadius float32, outerRadius float32, startAngle float32, endAngle float32, segments int, color Color) {
	a0 := Vector2(center)
	a1 := float32(innerRadius)
	a2 := float32(outerRadius)
	a3 := float32(startAngle)
	a4 := float32(endAngle)
	a5 := int64(segments)
	a6 := Color(color)
	internal.DrawRing.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5), unsafe.Pointer(&a6))
}

// Draw ring outline
func DrawRingLines(center Vector2, innerRadius float32, outerRadius float32, startAngle float32, endAngle float32, segments int, color Color) {
	a0 := Vector2(center)
	a1 := float32(innerRadius)
	a2 := float32(outerRadius)
	a3 := float32(startAngle)
	a4 := float32(endAngle)
	a5 := int64(segments)
	a6 := Color(color)
	internal.DrawRingLines.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5), unsafe.Pointer(&a6))
}

// Draw a color-filled rectangle
func DrawRectangle(posX int, posY int, width int, height int, color Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := int64(width)
	a3 := int64(height)
	a4 := Color(color)
	internal.DrawRectangle.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a color-filled rectangle (Vector version)
func DrawRectangleV(position Vector2, size Vector2, color Color) {
	a0 := Vector2(position)
	a1 := Vector2(size)
	a2 := Color(color)
	internal.DrawRectangleV.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a color-filled rectangle
func DrawRectangleRec(rec Rectangle, color Color) {
	a0 := Rectangle(rec)
	a1 := Color(color)
	internal.DrawRectangleRec.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Draw a color-filled rectangle with pro parameters
func DrawRectanglePro(rec Rectangle, origin Vector2, rotation float32, color Color) {
	a0 := Rectangle(rec)
	a1 := Vector2(origin)
	a2 := float32(rotation)
	a3 := Color(color)
	internal.DrawRectanglePro.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw a vertical-gradient-filled rectangle
func DrawRectangleGradientV(posX int, posY int, width int, height int, top Color, bottom Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := int64(width)
	a3 := int64(height)
	a4 := Color(top)
	a5 := Color(bottom)
	internal.DrawRectangleGradientV.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw a horizontal-gradient-filled rectangle
func DrawRectangleGradientH(posX int, posY int, width int, height int, left Color, right Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := int64(width)
	a3 := int64(height)
	a4 := Color(left)
	a5 := Color(right)
	internal.DrawRectangleGradientH.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw a gradient-filled rectangle with custom vertex colors
func DrawRectangleGradientEx(rec Rectangle, topLeft Color, bottomLeft Color, topRight Color, bottomRight Color) {
	a0 := Rectangle(rec)
	a1 := Color(topLeft)
	a2 := Color(bottomLeft)
	a3 := Color(topRight)
	a4 := Color(bottomRight)
	internal.DrawRectangleGradientEx.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw rectangle outline
func DrawRectangleLines(posX int, posY int, width int, height int, color Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := int64(width)
	a3 := int64(height)
	a4 := Color(color)
	internal.DrawRectangleLines.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw rectangle outline with extended parameters
func DrawRectangleLinesEx(rec Rectangle, lineThick float32, color Color) {
	a0 := Rectangle(rec)
	a1 := float32(lineThick)
	a2 := Color(color)
	internal.DrawRectangleLinesEx.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw rectangle with rounded edges
func DrawRectangleRounded(rec Rectangle, roundness float32, segments int, color Color) {
	a0 := Rectangle(rec)
	a1 := float32(roundness)
	a2 := int64(segments)
	a3 := Color(color)
	internal.DrawRectangleRounded.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw rectangle lines with rounded edges
func DrawRectangleRoundedLines(rec Rectangle, roundness float32, segments int, color Color) {
	a0 := Rectangle(rec)
	a1 := float32(roundness)
	a2 := int64(segments)
	a3 := Color(color)
	internal.DrawRectangleRoundedLines.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw rectangle with rounded edges outline
func DrawRectangleRoundedLinesEx(rec Rectangle, roundness float32, segments int, lineThick float32, color Color) {
	a0 := Rectangle(rec)
	a1 := float32(roundness)
	a2 := int64(segments)
	a3 := float32(lineThick)
	a4 := Color(color)
	internal.DrawRectangleRoundedLinesEx.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a color-filled triangle (vertex in counter-clockwise order!)
func DrawTriangle(v1 Vector2, v2 Vector2, v3 Vector2, color Color) {
	a0 := Vector2(v1)
	a1 := Vector2(v2)
	a2 := Vector2(v3)
	a3 := Color(color)
	internal.DrawTriangle.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw triangle outline (vertex in counter-clockwise order!)
func DrawTriangleLines(v1 Vector2, v2 Vector2, v3 Vector2, color Color) {
	a0 := Vector2(v1)
	a1 := Vector2(v2)
	a2 := Vector2(v3)
	a3 := Color(color)
	internal.DrawTriangleLines.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw a triangle fan defined by points (first vertex is the center)
func DrawTriangleFan(points *Vector2, pointCount int, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := Color(color)
	internal.DrawTriangleFan.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a triangle strip defined by points
func DrawTriangleStrip(points *Vector2, pointCount int, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := Color(color)
	internal.DrawTriangleStrip.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a regular polygon (Vector version)
func DrawPoly(center Vector2, sides int, radius float32, rotation float32, color Color) {
	a0 := Vector2(center)
	a1 := int64(sides)
	a2 := float32(radius)
	a3 := float32(rotation)
	a4 := Color(color)
	internal.DrawPoly.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a polygon outline of n sides
func DrawPolyLines(center Vector2, sides int, radius float32, rotation float32, color Color) {
	a0 := Vector2(center)
	a1 := int64(sides)
	a2 := float32(radius)
	a3 := float32(rotation)
	a4 := Color(color)
	internal.DrawPolyLines.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a polygon outline of n sides with extended parameters
func DrawPolyLinesEx(center Vector2, sides int, radius float32, rotation float32, lineThick float32, color Color) {
	a0 := Vector2(center)
	a1 := int64(sides)
	a2 := float32(radius)
	a3 := float32(rotation)
	a4 := float32(lineThick)
	a5 := Color(color)
	internal.DrawPolyLinesEx.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw spline: Linear, minimum 2 points
func DrawSplineLinear(points *Vector2, pointCount int, thick float32, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := float32(thick)
	a3 := Color(color)
	internal.DrawSplineLinear.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw spline: B-Spline, minimum 4 points
func DrawSplineBasis(points *Vector2, pointCount int, thick float32, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := float32(thick)
	a3 := Color(color)
	internal.DrawSplineBasis.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw spline: Catmull-Rom, minimum 4 points
func DrawSplineCatmullRom(points *Vector2, pointCount int, thick float32, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := float32(thick)
	a3 := Color(color)
	internal.DrawSplineCatmullRom.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
func DrawSplineBezierQuadratic(points *Vector2, pointCount int, thick float32, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := float32(thick)
	a3 := Color(color)
	internal.DrawSplineBezierQuadratic.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
func DrawSplineBezierCubic(points *Vector2, pointCount int, thick float32, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := float32(thick)
	a3 := Color(color)
	internal.DrawSplineBezierCubic.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw spline segment: Linear, 2 points
func DrawSplineSegmentLinear(p1 Vector2, p2 Vector2, thick float32, color Color) {
	a0 := Vector2(p1)
	a1 := Vector2(p2)
	a2 := float32(thick)
	a3 := Color(color)
	internal.DrawSplineSegmentLinear.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw spline segment: B-Spline, 4 points
func DrawSplineSegmentBasis(p1 Vector2, p2 Vector2, p3 Vector2, p4 Vector2, thick float32, color Color) {
	a0 := Vector2(p1)
	a1 := Vector2(p2)
	a2 := Vector2(p3)
	a3 := Vector2(p4)
	a4 := float32(thick)
	a5 := Color(color)
	internal.DrawSplineSegmentBasis.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw spline segment: Catmull-Rom, 4 points
func DrawSplineSegmentCatmullRom(p1 Vector2, p2 Vector2, p3 Vector2, p4 Vector2, thick float32, color Color) {
	a0 := Vector2(p1)
	a1 := Vector2(p2)
	a2 := Vector2(p3)
	a3 := Vector2(p4)
	a4 := float32(thick)
	a5 := Color(color)
	internal.DrawSplineSegmentCatmullRom.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw spline segment: Quadratic Bezier, 2 points, 1 control point
func DrawSplineSegmentBezierQuadratic(p1 Vector2, c2 Vector2, p3 Vector2, thick float32, color Color) {
	a0 := Vector2(p1)
	a1 := Vector2(c2)
	a2 := Vector2(p3)
	a3 := float32(thick)
	a4 := Color(color)
	internal.DrawSplineSegmentBezierQuadratic.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw spline segment: Cubic Bezier, 2 points, 2 control points
func DrawSplineSegmentBezierCubic(p1 Vector2, c2 Vector2, c3 Vector2, p4 Vector2, thick float32, color Color) {
	a0 := Vector2(p1)
	a1 := Vector2(c2)
	a2 := Vector2(c3)
	a3 := Vector2(p4)
	a4 := float32(thick)
	a5 := Color(color)
	internal.DrawSplineSegmentBezierCubic.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Get (evaluate) spline point: Linear
func GetSplinePointLinear(startPos Vector2, endPos Vector2, t float32) (res Vector2) {
	a0 := Vector2(startPos)
	a1 := Vector2(endPos)
	a2 := float32(t)
	internal.GetSplinePointLinear.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
	return res
}

// Get (evaluate) spline point: B-Spline
func GetSplinePointBasis(p1 Vector2, p2 Vector2, p3 Vector2, p4 Vector2, t float32) (res Vector2) {
	a0 := Vector2(p1)
	a1 := Vector2(p2)
	a2 := Vector2(p3)
	a3 := Vector2(p4)
	a4 := float32(t)
	internal.GetSplinePointBasis.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
	return res
}

// Get (evaluate) spline point: Catmull-Rom
func GetSplinePointCatmullRom(p1 Vector2, p2 Vector2, p3 Vector2, p4 Vector2, t float32) (res Vector2) {
	a0 := Vector2(p1)
	a1 := Vector2(p2)
	a2 := Vector2(p3)
	a3 := Vector2(p4)
	a4 := float32(t)
	internal.GetSplinePointCatmullRom.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
	return res
}

// Get (evaluate) spline point: Quadratic Bezier
func GetSplinePointBezierQuad(p1 Vector2, c2 Vector2, p3 Vector2, t float32) (res Vector2) {
	a0 := Vector2(p1)
	a1 := Vector2(c2)
	a2 := Vector2(p3)
	a3 := float32(t)
	internal.GetSplinePointBezierQuad.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
	return res
}

// Get (evaluate) spline point: Cubic Bezier
func GetSplinePointBezierCubic(p1 Vector2, c2 Vector2, c3 Vector2, p4 Vector2, t float32) (res Vector2) {
	a0 := Vector2(p1)
	a1 := Vector2(c2)
	a2 := Vector2(c3)
	a3 := Vector2(p4)
	a4 := float32(t)
	internal.GetSplinePointBezierCubic.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
	return res
}

// Check collision between two rectangles
func CheckCollisionRecs(rec1 Rectangle, rec2 Rectangle) (res bool) {
	a0 := Rectangle(rec1)
	a1 := Rectangle(rec2)
	res = internal.CheckCollisionRecs.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
	return res
}

// Check collision between two circles
func CheckCollisionCircles(center1 Vector2, radius1 float32, center2 Vector2, radius2 float32) (res bool) {
	a0 := Vector2(center1)
	a1 := float32(radius1)
	a2 := Vector2(center2)
	a3 := float32(radius2)
	res = internal.CheckCollisionCircles.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
	return res
}

// Check collision between circle and rectangle
func CheckCollisionCircleRec(center Vector2, radius float32, rec Rectangle) (res bool) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := Rectangle(rec)
	res = internal.CheckCollisionCircleRec.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
	return res
}

// Check if circle collides with a line created betweeen two points [p1] and [p2]
func CheckCollisionCircleLine(center Vector2, radius float32, p1 Vector2, p2 Vector2) (res bool) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := Vector2(p1)
	a3 := Vector2(p2)
	res = internal.CheckCollisionCircleLine.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
	return res
}

// Check if point is inside rectangle
func CheckCollisionPointRec(point Vector2, rec Rectangle) (res bool) {
	a0 := Vector2(point)
	a1 := Rectangle(rec)
	res = internal.CheckCollisionPointRec.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
	return res
}

// Check if point is inside circle
func CheckCollisionPointCircle(point Vector2, center Vector2, radius float32) (res bool) {
	a0 := Vector2(point)
	a1 := Vector2(center)
	a2 := float32(radius)
	res = internal.CheckCollisionPointCircle.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
	return res
}

// Check if point is inside a triangle
func CheckCollisionPointTriangle(point Vector2, p1 Vector2, p2 Vector2, p3 Vector2) (res bool) {
	a0 := Vector2(point)
	a1 := Vector2(p1)
	a2 := Vector2(p2)
	a3 := Vector2(p3)
	res = internal.CheckCollisionPointTriangle.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
	return res
}

// Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
func CheckCollisionPointLine(point Vector2, p1 Vector2, p2 Vector2, threshold int) (res bool) {
	a0 := Vector2(point)
	a1 := Vector2(p1)
	a2 := Vector2(p2)
	a3 := int64(threshold)
	res = internal.CheckCollisionPointLine.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
	return res
}

// Check if point is within a polygon described by array of vertices
func CheckCollisionPointPoly(point Vector2, points *Vector2, pointCount int) (res bool) {
	a0 := Vector2(point)
	a1 := (*Vector2)(points)
	a2 := int64(pointCount)
	res = internal.CheckCollisionPointPoly.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
	return res
}

// Check the collision between two lines defined by two points each, returns collision point by reference
func CheckCollisionLines(startPos1 Vector2, endPos1 Vector2, startPos2 Vector2, endPos2 Vector2, collisionPoint *Vector2) (res bool) {
	a0 := Vector2(startPos1)
	a1 := Vector2(endPos1)
	a2 := Vector2(startPos2)
	a3 := Vector2(endPos2)
	a4 := (*Vector2)(collisionPoint)
	res = internal.CheckCollisionLines.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
	return res
}

// Get collision rectangle for two rectangles collision
func GetCollisionRec(rec1 Rectangle, rec2 Rectangle) (res Rectangle) {
	a0 := Rectangle(rec1)
	a1 := Rectangle(rec2)
	internal.GetCollisionRec.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1))
	return res
}
