// Code generated by go generate ./...; DO NOT EDIT.

package raylib

import "unsafe"

// Set texture and rectangle to be used on shapes drawing
func SetShapesTexture(texture Texture2D, source Rectangle) {
	a0 := Texture2D(texture)
	a1 := Rectangle(source)
	setShapesTexture.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Get texture that is used for shapes drawing
func GetShapesTexture() (res Texture2D) {
	getShapesTexture.call(unsafe.Pointer(&res))
	return res
}

// Get texture source rectangle that is used for shapes drawing
func GetShapesTextureRectangle() (res Rectangle) {
	getShapesTextureRectangle.call(unsafe.Pointer(&res))
	return res
}

// Draw a pixel using geometry [Can be slow, use with care]
func DrawPixel(posX int, posY int, color Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := Color(color)
	drawPixel.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a pixel using geometry (Vector version) [Can be slow, use with care]
func DrawPixelV(position Vector2, color Color) {
	a0 := Vector2(position)
	a1 := Color(color)
	drawPixelV.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Draw a line
func DrawLine(startPosX int, startPosY int, endPosX int, endPosY int, color Color) {
	a0 := int64(startPosX)
	a1 := int64(startPosY)
	a2 := int64(endPosX)
	a3 := int64(endPosY)
	a4 := Color(color)
	drawLine.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a line (using gl lines)
func DrawLineV(startPos Vector2, endPos Vector2, color Color) {
	a0 := Vector2(startPos)
	a1 := Vector2(endPos)
	a2 := Color(color)
	drawLineV.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a line (using triangles/quads)
func DrawLineEx(startPos Vector2, endPos Vector2, thick float32, color Color) {
	a0 := Vector2(startPos)
	a1 := Vector2(endPos)
	a2 := float32(thick)
	a3 := Color(color)
	drawLineEx.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw lines sequence (using gl lines)
func DrawLineStrip(points *Vector2, pointCount int, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := Color(color)
	drawLineStrip.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw line segment cubic-bezier in-out interpolation
func DrawLineBezier(startPos Vector2, endPos Vector2, thick float32, color Color) {
	a0 := Vector2(startPos)
	a1 := Vector2(endPos)
	a2 := float32(thick)
	a3 := Color(color)
	drawLineBezier.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw a color-filled circle
func DrawCircle(centerX int, centerY int, radius float32, color Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radius)
	a3 := Color(color)
	drawCircle.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw a piece of a circle
func DrawCircleSector(center Vector2, radius float32, startAngle float32, endAngle float32, segments int, color Color) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := float32(startAngle)
	a3 := float32(endAngle)
	a4 := int64(segments)
	a5 := Color(color)
	drawCircleSector.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw circle sector outline
func DrawCircleSectorLines(center Vector2, radius float32, startAngle float32, endAngle float32, segments int, color Color) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := float32(startAngle)
	a3 := float32(endAngle)
	a4 := int64(segments)
	a5 := Color(color)
	drawCircleSectorLines.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw a gradient-filled circle
func DrawCircleGradient(centerX int, centerY int, radius float32, inner Color, outer Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radius)
	a3 := Color(inner)
	a4 := Color(outer)
	drawCircleGradient.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a color-filled circle (Vector version)
func DrawCircleV(center Vector2, radius float32, color Color) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := Color(color)
	drawCircleV.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw circle outline
func DrawCircleLines(centerX int, centerY int, radius float32, color Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radius)
	a3 := Color(color)
	drawCircleLines.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw circle outline (Vector version)
func DrawCircleLinesV(center Vector2, radius float32, color Color) {
	a0 := Vector2(center)
	a1 := float32(radius)
	a2 := Color(color)
	drawCircleLinesV.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw ellipse
func DrawEllipse(centerX int, centerY int, radiusH float32, radiusV float32, color Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radiusH)
	a3 := float32(radiusV)
	a4 := Color(color)
	drawEllipse.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw ellipse outline
func DrawEllipseLines(centerX int, centerY int, radiusH float32, radiusV float32, color Color) {
	a0 := int64(centerX)
	a1 := int64(centerY)
	a2 := float32(radiusH)
	a3 := float32(radiusV)
	a4 := Color(color)
	drawEllipseLines.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw ring
func DrawRing(center Vector2, innerRadius float32, outerRadius float32, startAngle float32, endAngle float32, segments int, color Color) {
	a0 := Vector2(center)
	a1 := float32(innerRadius)
	a2 := float32(outerRadius)
	a3 := float32(startAngle)
	a4 := float32(endAngle)
	a5 := int64(segments)
	a6 := Color(color)
	drawRing.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5), unsafe.Pointer(&a6))
}

// Draw ring outline
func DrawRingLines(center Vector2, innerRadius float32, outerRadius float32, startAngle float32, endAngle float32, segments int, color Color) {
	a0 := Vector2(center)
	a1 := float32(innerRadius)
	a2 := float32(outerRadius)
	a3 := float32(startAngle)
	a4 := float32(endAngle)
	a5 := int64(segments)
	a6 := Color(color)
	drawRingLines.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5), unsafe.Pointer(&a6))
}

// Draw a color-filled rectangle
func DrawRectangle(posX int, posY int, width int, height int, color Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := int64(width)
	a3 := int64(height)
	a4 := Color(color)
	drawRectangle.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a color-filled rectangle (Vector version)
func DrawRectangleV(position Vector2, size Vector2, color Color) {
	a0 := Vector2(position)
	a1 := Vector2(size)
	a2 := Color(color)
	drawRectangleV.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a color-filled rectangle
func DrawRectangleRec(rec Rectangle, color Color) {
	a0 := Rectangle(rec)
	a1 := Color(color)
	drawRectangleRec.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Draw a color-filled rectangle with pro parameters
func DrawRectanglePro(rec Rectangle, origin Vector2, rotation float32, color Color) {
	a0 := Rectangle(rec)
	a1 := Vector2(origin)
	a2 := float32(rotation)
	a3 := Color(color)
	drawRectanglePro.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw a vertical-gradient-filled rectangle
func DrawRectangleGradientV(posX int, posY int, width int, height int, top Color, bottom Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := int64(width)
	a3 := int64(height)
	a4 := Color(top)
	a5 := Color(bottom)
	drawRectangleGradientV.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw a horizontal-gradient-filled rectangle
func DrawRectangleGradientH(posX int, posY int, width int, height int, left Color, right Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := int64(width)
	a3 := int64(height)
	a4 := Color(left)
	a5 := Color(right)
	drawRectangleGradientH.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}

// Draw a gradient-filled rectangle with custom vertex colors
func DrawRectangleGradientEx(rec Rectangle, topLeft Color, bottomLeft Color, topRight Color, bottomRight Color) {
	a0 := Rectangle(rec)
	a1 := Color(topLeft)
	a2 := Color(bottomLeft)
	a3 := Color(topRight)
	a4 := Color(bottomRight)
	drawRectangleGradientEx.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw rectangle outline
func DrawRectangleLines(posX int, posY int, width int, height int, color Color) {
	a0 := int64(posX)
	a1 := int64(posY)
	a2 := int64(width)
	a3 := int64(height)
	a4 := Color(color)
	drawRectangleLines.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw rectangle outline with extended parameters
func DrawRectangleLinesEx(rec Rectangle, lineThick float32, color Color) {
	a0 := Rectangle(rec)
	a1 := float32(lineThick)
	a2 := Color(color)
	drawRectangleLinesEx.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw rectangle with rounded edges
func DrawRectangleRounded(rec Rectangle, roundness float32, segments int, color Color) {
	a0 := Rectangle(rec)
	a1 := float32(roundness)
	a2 := int64(segments)
	a3 := Color(color)
	drawRectangleRounded.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw rectangle lines with rounded edges
func DrawRectangleRoundedLines(rec Rectangle, roundness float32, segments int, color Color) {
	a0 := Rectangle(rec)
	a1 := float32(roundness)
	a2 := int64(segments)
	a3 := Color(color)
	drawRectangleRoundedLines.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw rectangle with rounded edges outline
func DrawRectangleRoundedLinesEx(rec Rectangle, roundness float32, segments int, lineThick float32, color Color) {
	a0 := Rectangle(rec)
	a1 := float32(roundness)
	a2 := int64(segments)
	a3 := float32(lineThick)
	a4 := Color(color)
	drawRectangleRoundedLinesEx.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a color-filled triangle (vertex in counter-clockwise order!)
func DrawTriangle(v1 Vector2, v2 Vector2, v3 Vector2, color Color) {
	a0 := Vector2(v1)
	a1 := Vector2(v2)
	a2 := Vector2(v3)
	a3 := Color(color)
	drawTriangle.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw triangle outline (vertex in counter-clockwise order!)
func DrawTriangleLines(v1 Vector2, v2 Vector2, v3 Vector2, color Color) {
	a0 := Vector2(v1)
	a1 := Vector2(v2)
	a2 := Vector2(v3)
	a3 := Color(color)
	drawTriangleLines.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
}

// Draw a triangle fan defined by points (first vertex is the center)
func DrawTriangleFan(points *Vector2, pointCount int, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := Color(color)
	drawTriangleFan.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a triangle strip defined by points
func DrawTriangleStrip(points *Vector2, pointCount int, color Color) {
	a0 := (*Vector2)(points)
	a1 := int64(pointCount)
	a2 := Color(color)
	drawTriangleStrip.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
}

// Draw a regular polygon (Vector version)
func DrawPoly(center Vector2, sides int, radius float32, rotation float32, color Color) {
	a0 := Vector2(center)
	a1 := int64(sides)
	a2 := float32(radius)
	a3 := float32(rotation)
	a4 := Color(color)
	drawPoly.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a polygon outline of n sides
func DrawPolyLines(center Vector2, sides int, radius float32, rotation float32, color Color) {
	a0 := Vector2(center)
	a1 := int64(sides)
	a2 := float32(radius)
	a3 := float32(rotation)
	a4 := Color(color)
	drawPolyLines.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw a polygon outline of n sides with extended parameters
func DrawPolyLinesEx(center Vector2, sides int, radius float32, rotation float32, lineThick float32, color Color) {
	a0 := Vector2(center)
	a1 := int64(sides)
	a2 := float32(radius)
	a3 := float32(rotation)
	a4 := float32(lineThick)
	a5 := Color(color)
	drawPolyLinesEx.void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}
