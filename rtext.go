// Code generated by go generate; DO NOT EDIT.

package raylib

import (
	"github.com/judah-caruso/raylib-purego/internal"
	"unsafe"
)

// Get the default Font
func GetFontDefault() (res Font) {
	internal.GetFontDefault.Call(unsafe.Pointer(&res))
	return res
}

// Load font from file into GPU memory (VRAM)
func LoadFont(fileName string) (res Font) {
	a0 := tocstring(fileName)
	internal.LoadFont.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0))
	return res
}

// Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set, font size is provided in pixels height
func LoadFontEx(fileName string, fontSize int, codepoints *int32, codepointCount int) (res Font) {
	a0 := tocstring(fileName)
	a1 := int64(fontSize)
	a2 := (*int32)(codepoints)
	a3 := int64(codepointCount)
	internal.LoadFontEx.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3))
	return res
}

// Load font from Image (XNA style)
func LoadFontFromImage(image Image, key Color, firstChar int) (res Font) {
	a0 := Image(image)
	a1 := Color(key)
	a2 := int64(firstChar)
	internal.LoadFontFromImage.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2))
	return res
}

// Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
func LoadFontFromMemory(fileType string, fileData string, dataSize int, fontSize int, codepoints *int32, codepointCount int) (res Font) {
	a0 := tocstring(fileType)
	a1 := tocstring(fileData)
	a2 := int64(dataSize)
	a3 := int64(fontSize)
	a4 := (*int32)(codepoints)
	a5 := int64(codepointCount)
	internal.LoadFontFromMemory.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
	return res
}

// Check if a font is valid (font data loaded, WARNING: GPU texture not checked)
func IsFontValid(font Font) (res bool) {
	a0 := Font(font)
	res = internal.IsFontValid.Bool(unsafe.Pointer(&a0))
	return res
}

// Load font data for further use
func LoadFontData(fileData string, dataSize int, fontSize int, codepoints *int32, codepointCount int, typ int) (res *GlyphInfo) {
	a0 := tocstring(fileData)
	a1 := int64(dataSize)
	a2 := int64(fontSize)
	a3 := (*int32)(codepoints)
	a4 := int64(codepointCount)
	a5 := int64(typ)
	internal.LoadFontData.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
	return res
}

// Generate image font atlas using chars info
func GenImageFontAtlas(glyphs *GlyphInfo, glyphRecs **Rectangle, glyphCount int, fontSize int, padding int, packMethod int) (res Image) {
	a0 := (*GlyphInfo)(glyphs)
	a1 := (**Rectangle)(glyphRecs)
	a2 := int64(glyphCount)
	a3 := int64(fontSize)
	a4 := int64(padding)
	a5 := int64(packMethod)
	internal.GenImageFontAtlas.Call(unsafe.Pointer(&res), unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
	return res
}

// Unload font chars info data (RAM)
func UnloadFontData(glyphs *GlyphInfo, glyphCount int) {
	a0 := (*GlyphInfo)(glyphs)
	a1 := int64(glyphCount)
	internal.UnloadFontData.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Unload font from GPU memory (VRAM)
func UnloadFont(font Font) {
	a0 := Font(font)
	internal.UnloadFont.Void(unsafe.Pointer(&a0))
}

// Export font as code file, returns true on success
func ExportFontAsCode(font Font, fileName string) (res bool) {
	a0 := Font(font)
	a1 := tocstring(fileName)
	res = internal.ExportFontAsCode.Bool(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
	return res
}

// Draw current FPS
func DrawFPS(posX int, posY int) {
	a0 := int64(posX)
	a1 := int64(posY)
	internal.DrawFPS.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1))
}

// Draw text (using default font)
func DrawText(text string, posX int, posY int, fontSize int, color Color) {
	a0 := tocstring(text)
	a1 := int64(posX)
	a2 := int64(posY)
	a3 := int64(fontSize)
	a4 := Color(color)
	internal.DrawText.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4))
}

// Draw text using font and additional parameters
func DrawTextEx(font Font, text string, position Vector2, fontSize float32, spacing float32, tint Color) {
	a0 := Font(font)
	a1 := tocstring(text)
	a2 := Vector2(position)
	a3 := float32(fontSize)
	a4 := float32(spacing)
	a5 := Color(tint)
	internal.DrawTextEx.Void(unsafe.Pointer(&a0), unsafe.Pointer(&a1), unsafe.Pointer(&a2), unsafe.Pointer(&a3), unsafe.Pointer(&a4), unsafe.Pointer(&a5))
}
